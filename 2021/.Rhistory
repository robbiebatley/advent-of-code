east_current <- which(seafloor == ">", arr.ind = TRUE)
east_next <- east_current
east_next[, "col"] <- mod1p(east_next[, "col"] + 1, ncol(seafloor))
can_move <- seafloor[east_next] == "."
seafloor[east_current[can_move, ]] <- "."
seafloor[east_next[can_move, ]] <- ">"
south_current <- which(seafloor == "v", arr.ind = TRUE)
south_current
south_next <- south_current
south_next[, "row"] <- mod1p(south_next[, "row"] + 1, nrow(seafloor))
south_next
can_move <- seafloor[south_next] == "."
can_move
seafloor <- example
seafloor
east_current <- which(seafloor == ">", arr.ind = TRUE)
east_next <- east_current
east_next[, "col"] <- mod1p(east_next[, "col"] + 1, ncol(seafloor))
can_move <- seafloor[east_next] == "."
seafloor[east_current[can_move, ]] <- "."
seafloor[east_next[can_move, ]] <- ">"
south_current <- which(seafloor == "v", arr.ind = TRUE)
south_next <- south_current
south_next[, "row"] <- mod1p(south_next[, "row"] + 1, nrow(seafloor))
can_move <- seafloor[south_next] == "."
seafloor[south_current[can_move, ]] <- "."
seafloor[south_next[can_move, ]] <- "v"
seafloor
current_loc <- which(seafloor == ">", arr.ind = TRUE)
bench::mark(
{new_loc <- current_loc
new_loc[, "col"] <- mod1p(current_loc[, "col"] + 1, ncol(seafloor))
new_loc},
{cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
}
)
cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
bench::mark(
{new_loc <- unname(current_loc)
new_loc[, 2] <- mod1p(current_loc[, 2] + 1, ncol(seafloor))
new_loc},
{cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
}
)
bench::mark(
{new_loc <- unname(current_loc)
new_loc[, 2] <- mod1p(current_loc[, 2] + 1, ncol(seafloor))
new_loc},
{cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
}
) |> View()
seafloor <- example
# East herd
current_loc <- which(seafloor == ">", arr.ind = TRUE)
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- ">"
# South herd
current_loc <- which(seafloor == "v", arr.ind = TRUE)
next_loc <- cbind(
mod1p(current_loc[, "row"] + 1, nrow(seafloor)),
current_loc[, "col"]
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- "v"
seafloor
library(zeallot)
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (i == 1) return(1)
}
}
do_step <- function(seafloor){
# East herd
current_loc <- which(seafloor == ">", arr.ind = TRUE)
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- ">"
cucumbers_moved <- length(can_move)
# South herd
current_loc <- which(seafloor == "v", arr.ind = TRUE)
next_loc <- cbind(
mod1p(current_loc[, "row"] + 1, nrow(seafloor)),
current_loc[, "col"]
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- "v"
cucumbers_moved <- cucumbers_moved + length(can_move)
list(seafloor, cucumbers_moved)
}
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (i == 1) return(cucumbers_moved)
}
}
solve_p1(example)
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
example |>
solve_p1()
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
print(i)
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
example |>
solve_p1()
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
do_step <- function(seafloor){
# East herd
current_loc <- which(seafloor == ">", arr.ind = TRUE)
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- ">"
cucumbers_moved <- length(can_move)
# South herd
current_loc <- which(seafloor == "v", arr.ind = TRUE)
next_loc <- cbind(
mod1p(current_loc[, "row"] + 1, nrow(seafloor)),
current_loc[, "col"]
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- "v"
cucumbers_moved <- cucumbers_moved + length(can_move)
list(seafloor, cucumbers_moved)
}
example_1 <- file.path("day25", "example_1.txt") |>
parse_input()
# Check 1 step
example_1 <- file.path("day25", "example_1.txt") |>
parse_input()
example |>
do_step()
example |>
do_step() |>
pluck(1)
example_1
example |>
do_step() |>
pluck(1) |>
identical(example_1)
# Check 1 step
example_2 <- file.path("day25", "example_1.txt") |>
parse_input()
example |>
do_step() |>
pluck(1) |>
do_step() |>
pluck(1) |>
identical(example_2)
example |>
do_step() |>
pluck(1) |>
do_step() |>
pluck(1)
example_2
example_1
# Check 1 step
example_2 <- file.path("day25", "example_2.txt") |>
parse_input()
example |>
do_step() |>
pluck(1) |>
do_step() |>
pluck(1)
example |>
do_step() |>
pluck(1) |>
do_step() |>
pluck(1) |>
indentical(example_2)
example |>
do_step() |>
pluck(1) |>
do_step() |>
pluck(1) |>
identical(example_2)
reduce(
1:2,
\(x, i) do_step(x) |> pluck(1),
.init = example
)
reduce(
1:2,
\(x, i) do_step(x) |> pluck(1),
.init = example
) |>
identical(example_2)
# Check 1 step
example_57 <- file.path("day25", "example_57.txt") |>
parse_input()
reduce(
1:57,
\(x, i) do_step(x) |> pluck(1),
.init = example
) |>
identical(example_57)
reduce(
1:57,
\(x, i) do_step(x) |> pluck(1),
.init = example
)
example_3 <- file.path("day25", "example_3.txt") |>
parse_input()
reduce(
1:3,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_3)
example_4 <- file.path("day25", "example_4.txt") |>
parse_input()
reduce(
1:4,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
example_4 <- file.path("day25", "example_5.txt") |>
parse_input()
reduce(
1:5,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
example_4 <- file.path("day25", "example_10.txt") |>
parse_input()
reduce(
1:10,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
example_4 <- file.path("day25", "example_20.txt") |>
parse_input()
reduce(
1:20,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
# Check 1 step
example_4 <- file.path("day25", "example_50.txt") |>
parse_input()
reduce(
1:50,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
# Check 1 step
example_4 <- file.path("day25", "example_55.txt") |>
parse_input()
reduce(
1:55,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
# Check 1 step
example_4 <- file.path("day25", "example_56.txt") |>
parse_input()
reduce(
1:56,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
# Check 1 step
example_4 <- file.path("day25", "example_57.txt") |>
parse_input()
reduce(
1:57,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
# Check 1 step
example_4 <- file.path("day25", "example_56.txt") |>
parse_input()
reduce(
1:57,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
reduce(
1:56,
\(x, i) do_step(x) |> pluck(1),
.init = example
)  |>
identical(example_4)
reduce(
1:56,
\(x, i) do_step(x) |> pluck(1),
.init = example
)
reduce(
1:57,
\(x, i) do_step(x) |> pluck(1),
.init = example
)
# Check 1 step
example_56 <- file.path("day25", "example_56.txt") |>
parse_input()
seafloor <- example_56
seafloor
current_loc <- which(seafloor == ">", arr.ind = TRUE)
current_loc
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
next_loc
can_move <- seafloor[next_loc] == "."
can_move
do_step <- function(seafloor){
# East herd
current_loc <- which(seafloor == ">", arr.ind = TRUE)
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- ">"
cucumbers_moved <- sum(can_move)
# South herd
current_loc <- which(seafloor == "v", arr.ind = TRUE)
next_loc <- cbind(
mod1p(current_loc[, "row"] + 1, nrow(seafloor)),
current_loc[, "col"]
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- "v"
cucumbers_moved <- cucumbers_moved + sum(can_move)
list(seafloor, cucumbers_moved)
}
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
print(i)
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
print(i)
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
example |>
solve_p1()
reduce(
1:57,
\(x, i) do_step(x) |> pluck(1),
.init = example
)
current_loc <- which(seafloor == ">", arr.ind = TRUE)
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- ">"
cucumbers_moved <- sum(can_move)
can_move
current_loc[can_move, ]
seafloor <- example_56
current_loc <- which(seafloor == ">", arr.ind = TRUE)
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
can_move <- seafloor[next_loc] == "."
current_loc[can_move, ]
seafloor
seafloor[current_loc[can_move, ]] <- "."
seafloor[next_loc[can_move, ]] <- ">"
cucumbers_moved <- sum(can_move)
cucumbers_moved
seafloor
current_loc[can_move, , drop = FALSE]
do_step <- function(seafloor){
# East herd
current_loc <- which(seafloor == ">", arr.ind = TRUE)
next_loc <- cbind(
current_loc[, "row"],
mod1p(current_loc[, "col"] + 1, ncol(seafloor))
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, , drop = FALSE]] <- "."
seafloor[next_loc[can_move, , drop = FALSE]] <- ">"
cucumbers_moved <- sum(can_move)
# South herd
current_loc <- which(seafloor == "v", arr.ind = TRUE)
next_loc <- cbind(
mod1p(current_loc[, "row"] + 1, nrow(seafloor)),
current_loc[, "col"]
)
can_move <- seafloor[next_loc] == "."
seafloor[current_loc[can_move, , drop = FALSE]] <- "."
seafloor[next_loc[can_move, , drop = FALSE]] <- "v"
cucumbers_moved <- cucumbers_moved + sum(can_move)
list(seafloor, cucumbers_moved)
}
reduce(
1:57,
\(x, i) do_step(x) |> pluck(1),
.init = example
)
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
print(i)
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i - 1)
}
}
example |>
solve_p1()
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
print(i)
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
example |>
solve_p1()
testthat::expect_equal(example |> solve_p1(), 58)
solve_p1 <- function(seafloor){
i <- 0
repeat {
i <- i + 1
c(seafloor, cucumbers_moved) %<-% do_step(seafloor)
if (cucumbers_moved == 0) return(i)
}
}
testthat::expect_equal(example |> solve_p1(), 58)
input |> solve_p1()
renv::snapshot()
renv::snapshot()
